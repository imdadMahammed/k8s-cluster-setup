#                                                       K8s-Kubeadm-Cluster-Setup
#                                                      ===========================

# Agenda: Kubernetes Setup Using Kubeadm In AWS EC2 Ubuntu Servers
# =======================================================

Prerequisite:
==========

3 - Ubuntu Serves

1 - Manager  (4GB RAM , 2 Core) t2.medium

2 - Workers  (1 GB, 1 Core)     t2.micro

Note: Open Required Ports In AWS Security Groups. For now we will open All trafic.

==========COMMON FOR MASTER & SLAVES START ====

# First, login as ‘root’ user because the following set of commands need to be executed with ‘sudo’ permissions.

sudo su -

#Turn Off Swap Space

swapoff -a
sed -i '/ swap / s/^\(.*\)$/#\1/g' /etc/fstab

# Install And Enable Docker

# apt install docker.io -y (or)
> sudo apt-get remove docker docker-engine docker.io containerd runc
> sudo apt-get update
> sudo apt-get install \
    ca-certificates \
    curl \
    gnupg \
    lsb-release
> sudo mkdir -p /etc/apt/keyrings
> sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
> echo \
  "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
  $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
> sudo apt-get update
> sudo apt-get install docker-ce docker-ce-cli containerd.io
> sudo usermod -aG docker ubuntu
> sudo mkdir /etc/docker
> cat <<EOF | sudo tee /etc/docker/daemon.json
{ "exec-opts": ["native.cgroupdriver=systemd"],
"log-driver": "json-file",
"log-opts":
{ "max-size": "100m" },
"storage-driver": "overlay2"
}
EOF
> sudo systemctl enable docker
> sudo systemctl daemon-reload
> sudo systemctl restart docker

# Install k8s.

> sudo apt-get update -y
> sudo apt-get install -y apt-transport-https ca-certificates curl
> sudo curl -fsSLo /usr/share/keyrings/kubernetes-archive-keyring.gpg https://packages.cloud.google.com/apt/doc/apt-key.gpg
> echo "deb [signed-by=/usr/share/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee /etc/apt/sources.list.d/kubernetes.list
> sudo apt-get update
> sudo apt-get install -y kubelet kubeadm kubectl
> sudo apt-mark hold kubelet kubeadm kubectl

==========COMMON FOR MASTER & SLAVES END=====



===========In Master Node Start====================

# Steps Only For Kubernetes Master Only

# Switch to the root user.

sudo su -

# Initialize Kubernates master by executing below commond.

kubeadm init

#exit root user & exeucte as normal user

exit
-------------------------------------------------------
# These below commands execute in a normal user9ex-:ubuntu).

  > mkdir -p $HOME/.kube
  > sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
  > sudo chown $(id -u):$(id -g) $HOME/.kube/config

# Add Worker Machines to Kubernates Master
# =========================================
  >  Copy kubeadm join token and execute in Worker Nodes to join to cluster

# To verify, if kubectl is working or not, run the following command.

kubectl get pods -o wide --all-namespaces

#You will notice from the previous command, that all the pods are running except one: ‘kube-dns’. For resolving this we will install a # pod network. To install the weave pod network, run the following command:

kubectl apply -f "https://cloud.weave.works/k8s/net?k8s-version=$(kubectl version | base64 | tr -d '\n')"

# If you get any below error While executing the weave network command 
# Eerror -:
#----------
The connection to the server 192.168.1.101:6443 was refused - did you specify the right host or port?
# Then execute -:
----------------
# I performed below steps to solved the issue:
--------------------------------------------
 sudo systemctl stop kubelet
 sudo systemctl start kubelet
 strace -eopenat kubectl version

# Check the node status -:
# --------------------------
  kubectl get nodes

  kubectl get pods --all-namespaces

# Get token
#----------

kubeadm token create --print-join-command

# =========In Master Node End====================


# Now kubectl commonds has to be executed in master machine.

# Check Nodes
# =============

kubectl get nodes


# Deploy Sample Application
# ==========================

kubectl run nginx-demo --image=nginx --port=80

kubectl expose deployment nginx-demo --port=80 --type=NodePort


# Get Node Port details
# =====================
  kubectl get services
